/***	Copyright (c) 2009 Maarten Reijmerink, http://www.numblock.nl**	Permission is hereby granted, free of charge, to any person obtaining a copy*	of this software and associated documentation files (the "Software"), to deal*	in the Software without restriction, including without limitation the rights*	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell*	copies of the Software, and to permit persons to whom the Software is*	furnished to do so, subject to the following conditions:*	*	The above copyright notice and this permission notice shall be included in*	all copies or substantial portions of the Software.*	*	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR*	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,*	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE*	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER*	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,*	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN*	THE SOFTWARE.* */package nl.numblock.panoviewer.view {	import nl.numblock.DebugInterests;	import nl.numblock.panoviewer.assets.ControlBar;	import nl.numblock.panoviewer.interfaces.ICubeController;	import nl.numblock.panoviewer.interfaces.IImageData;	import nl.numblock.util.debug.Debugger;	import flash.display.Sprite;	import flash.display.StageDisplayState;	import flash.events.Event;	import flash.events.MouseEvent;	/**	 * @author numblock	 */	public class ControlBarView extends Sprite	{		private var __model 				: 	IImageData;		private var __controller 			: 	ICubeController;		private var __graphics 				: 	ControlBar;		public function ControlBarView	(												_model			:	IImageData,											_controller		:	ICubeController	=	null										) 		{			super();			__model			=	_model;			__controller	=	_controller;						this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				private function onAddedToStage( _event : Event ) : void 		{			removeEventListener(Event.ADDED_TO_STAGE, 	onAddedToStage);			stage.addEventListener(Event.RESIZE,		resize);						__graphics			=	new ControlBar();			__graphics.fsButton.addEventListener(MouseEvent.CLICK, onFSClick);			resize();			addChild(__graphics);		}				private function onFSClick(event : MouseEvent) : void 		{			goFullScreen();		}				private function goFullScreen() : void		{		    if (this.stage.displayState == StageDisplayState.NORMAL) 		    {		        this.stage.displayState=StageDisplayState.FULL_SCREEN;		    } else {		        this.stage.displayState=StageDisplayState.NORMAL;		    }		}				private function resize( _event : Event	= null) : void 		{			__graphics.y			=	(stage.stageHeight-__graphics.height);			__graphics.bg.width		=	this.stage.stageWidth;			__graphics.fsButton.x	=	(this.stage.stageWidth - __graphics.fsButton.width - 20);		}	}}