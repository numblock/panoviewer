/***	Copyright (c) 2009 Maarten Reijmerink, http://www.numblock.nl**	Permission is hereby granted, free of charge, to any person obtaining a copy*	of this software and associated documentation files (the "Software"), to deal*	in the Software without restriction, including without limitation the rights*	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell*	copies of the Software, and to permit persons to whom the Software is*	furnished to do so, subject to the following conditions:*	*	The above copyright notice and this permission notice shall be included in*	all copies or substantial portions of the Software.*	*	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR*	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,*	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE*	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER*	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,*	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN*	THE SOFTWARE.* */package {	import nl.numblock.panoviewer.model.AppDataProxy;	import nl.numblock.panoviewer.model.ImageLoaderProxy;	import nl.numblock.panoviewer.model.vo.AppDataVO;	import nl.numblock.panoviewer.view.ContextMenuView;	import nl.numblock.panoviewer.view.ControlBarView;	import nl.numblock.panoviewer.view.CubeView;	import nl.numblock.panoviewer.view.ProgressBarView;	import flash.display.Sprite;	import flash.events.Event;	import flash.external.ExternalInterface;	/**	 * @author numblock	 */	public class Main extends Sprite {//		Model(s)		private var __imageLoaderProxy	:	ImageLoaderProxy;		private var __appDataProxy 		: 	AppDataProxy;//		View(s)		private var __cubeView 			: 	CubeView;		private var __probressBarView 	: 	ProgressBarView;		private var __contextMenuView 	: 	ContextMenuView;		private var __controlBarView 	: 	ControlBarView;		//		Controller(s)//		private static const DEFAULT_FILEPATH	:	String	=	"";		private static const DEFAULT_PREFIX		:	String	=	"panorama";				public function Main () 		{			super();			this.addEventListener(Event.ADDED_TO_STAGE, buildMVC);		}				private function buildMVC( _event : Event ) : void 		{			this.removeEventListener(Event.ADDED_TO_STAGE, buildMVC);						__imageLoaderProxy								=	new ImageLoaderProxy();			__appDataProxy									=	new AppDataProxy();			__cubeView										=	new CubeView(__imageLoaderProxy);			__probressBarView								=	new ProgressBarView(__imageLoaderProxy);			__controlBarView								=	new ControlBarView(__imageLoaderProxy);			__contextMenuView								=	new ContextMenuView(this);						addChild(__cubeView);			addChild(__probressBarView);			addChild(__controlBarView);			//			startup using flashvars			startup(this.loaderInfo.parameters );						if(ExternalInterface.available)			{				ExternalInterface.addCallback("changeNode", changeNode);//				TODO: mmm remove this. not generic.				ExternalInterface.call("handleChange", null);			}		}//		get all necessary parameters from flashvars or js and store them in proxy.//		then start loading (new) images		private function startup( _data : Object ) : void 		{			var appData				:	AppDataVO			=	new AppDataVO();			appData.filePath								=	_data.filePath;			appData.prefix									=	_data.prefix;						__appDataProxy.appdata							=	appData;			//			TODO: mmm display error to user instead of just returning			if(__appDataProxy.appdata.filePath == null || __appDataProxy.appdata.prefix == null) 			{//				__appDataProxy.appdata.filePath = 	DEFAULT_FILEPATH;//				__appDataProxy.appdata.prefix 	= 	DEFAULT_PREFIX;				return;			}			//			is this allowed? proxy getting data directly from another proxy??			__imageLoaderProxy.loadImages(__appDataProxy.appdata);		}				private function changeNode(_filePath : String, _prefix : String) : void 		{			var data	:	Object	=	{											filePath	:	_filePath,											prefix		:	_prefix										};			startup(data);		}	}}