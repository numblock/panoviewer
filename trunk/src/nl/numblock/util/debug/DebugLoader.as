package nl.numblock.util.debug {	import flash.events.Event;			import nl.numblock.util.debug.DebugLoaderInfo;			import flash.system.LoaderContext;		import flash.net.URLRequest;		import flash.display.LoaderInfo;		import flash.events.TimerEvent;		import flash.utils.Timer;		import flash.display.Loader;		/**	 * @author Peter	 */	public class DebugLoader extends Loader 	{				private var _timer:Timer;		private var _contentLoaderInfo:DebugLoaderInfo;		private var _loadStep:Number;		public function DebugLoader(duration:int = 3000, numSteps:int = 100)		{			var delay:Number = duration/numSteps;			_timer = new Timer(delay,numSteps);			_timer.addEventListener(TimerEvent.TIMER,onTimer);						_contentLoaderInfo = new DebugLoaderInfo();			_contentLoaderInfo.loader = this;			_contentLoaderInfo.content = content;			_contentLoaderInfo.addEventListener(Event.COMPLETE, onLoadComplete);			_loadStep = _contentLoaderInfo.bytesTotal/numSteps;		}		private function onTimer(event:TimerEvent):void		{			_contentLoaderInfo.bytesLoaded += _loadStep;		}		public function get contentDebugLoaderInfo():DebugLoaderInfo		{			return _contentLoaderInfo;		}		override public function get contentLoaderInfo():LoaderInfo		{			throw new Error("Use the contentDebugLoaderInfo instead of the contentLoaderInfo property on the DebugLoader");			return null;		}		override public function load(request:URLRequest, context:LoaderContext = null):void		{			super.load(request,context);			visible = false;						_contentLoaderInfo.url = request.url;			_timer.start();		}		private function onLoadComplete(event:Event):void		{			visible = true;		}			override public function unload():void		{			_timer.reset();		}		override public function close():void		{			_timer.reset();		}	}}