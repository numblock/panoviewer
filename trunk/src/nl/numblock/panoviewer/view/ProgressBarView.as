/***	Copyright (c) 2009 Maarten Reijmerink, http://www.numblock.nl**	Permission is hereby granted, free of charge, to any person obtaining a copy*	of this software and associated documentation files (the "Software"), to deal*	in the Software without restriction, including without limitation the rights*	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell*	copies of the Software, and to permit persons to whom the Software is*	furnished to do so, subject to the following conditions:*	*	The above copyright notice and this permission notice shall be included in*	all copies or substantial portions of the Software.*	*	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR*	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,*	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE*	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER*	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,*	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN*	THE SOFTWARE.* */package nl.numblock.panoviewer.view {	import gs.TweenLite;	import nl.numblock.DebugInterests;	import nl.numblock.panoviewer.assets.ProgressBar;	import nl.numblock.panoviewer.interfaces.ICubeController;	import nl.numblock.panoviewer.interfaces.IImageData;	import nl.numblock.util.debug.Debugger;	import com.hydrotik.queueloader.QueueLoaderEvent;	import flash.display.Sprite;	import flash.events.Event;	/**	 * @author numblock	 */	public class ProgressBarView extends Sprite	{		private var __model 				: 	IImageData;		private var __controller 			: 	ICubeController;		private var __graphics 				: 	ProgressBar;		public function ProgressBarView	(												_model			:	IImageData,											_controller		:	ICubeController	=	null										) 		{			super();			__model			=	_model;			__controller	=	_controller;						alpha			=	0;			this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				private function onAddedToStage( _event : Event ) : void 		{			removeEventListener(Event.ADDED_TO_STAGE, 	onAddedToStage);			stage.addEventListener(Event.RESIZE,		center);						__graphics			=	new ProgressBar();			center();			addChild(__graphics);							__model.addEventListener(QueueLoaderEvent.QUEUE_START, 		onQueueStart);			__model.addEventListener(QueueLoaderEvent.QUEUE_PROGRESS, 	onQueueProgress);			__model.addEventListener(QueueLoaderEvent.QUEUE_COMPLETE, 	onQueueComplete);		}				private function center( _event : Event	= null) : void 		{			__graphics.x		=	(this.stage.stageWidth - __graphics.width)/2;			__graphics.y		=	(this.stage.stageHeight - __graphics.height)/2;		}		private function onQueueStart(_event : QueueLoaderEvent) : void 		{			__graphics.myMask.scaleY		=	0;			__graphics.percentageText.text	=	"0";			__graphics.addEventListener(Event.ENTER_FRAME, onEnterFrame);			this.alpha	=	1;		}				private function onEnterFrame(event : Event) : void 		{			__graphics.dots.rotation+=5;		}		private function onQueueProgress(_event : QueueLoaderEvent) : void 		{			var percentage	:	Number		= 	_event.queuepercentage;//_event.bytesLoaded / _event.bytesTotal;			__graphics.myMask.scaleY		=	percentage;			__graphics.percentageText.text	=	String(Math.round(percentage*100));		}		private function onQueueComplete(_event : QueueLoaderEvent) : void 		{			TweenLite.to(this, 0.5, {alpha : 0, onComplete : reset});		}				private function reset() : void		{			__graphics.removeEventListener(Event.ENTER_FRAME, onEnterFrame);		}	}}